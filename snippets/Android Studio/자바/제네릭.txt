1. 제네릭이란?
  1) 제네릭은 클래스에서 사용할 타입을 클래스 외부에서 설정하는 것이다.
  

2. class CustomStack<T> {
     List<T> customStack = new ArrayList<>();
    
     public void pop( T inputItem ) {
        customStack.add( inputItem );
     }
   } 
 
    public class GenericEx_1 {
    
      public static void main(String[] args) {
         CustomStack<String> stringStack = new CustomStack();
         CustomStack<Integer> integerStack = new CustomStack();

         stringStack.pop( "홍길동" );
      }
    }
   1) 장점
     (1) 컴파일 시에 타입을 검사하여 에러를 발생시킨다. 
     (2) 타입 변환을 제거한다.

3. public class GenericArrayList<T extends Number>
  1) GenericArrayList는 Number의 서브클래스만 타입으로 가질 수 있다.

4. public class GenericArrayList<T super Number>
  1) GenericArrayList는 Number의 상위클래스만 타입으로 가질 수 있다.

5. 제네릭을 사용할 수 없는 경우
  1) GenericArrayList 를 정의할 때, 다른 부분에는 모두 T 를 사용했는데, 배열을 생성하는 
     부분에서는 T 를 사용하지 않고 Object 를 사용했고 get() 호출시 T 타입으로 형변환 하는 코드를 삽입했다.
     GenericArrayList 가 가지는 elementData 도 new T[5] 와 같이 생성하면 get() 메서드에서 (T)로 
     형변환 하는 작업을 안해도 될텐데 왜 한걸까?
     그 이유는 new 연산자 때문이다. new 연산자는 heap 영역에 충분한 공간이 있는지 확인한 후 메모리를 확보하는 역할을 한다. 
     충분한 공간이 있는지 확인하려면 타입을 알아야한다. 그런데 컴파일 시점에 타입 T 가 무엇인지 알 수 없기 때문에 new T[5]와 
     같이 제네릭으로 배열을 생성할 수는 없다.

  2) static 변수에도 제네릭을 사용할 수 없다. static 변수는 인스턴스에 종속되지 않는 클래스변수로써 
     모든 인스턴스가 공통된 저장공간을 공유하게 되는 변수이다.
     static 변수에 제네릭을 사용하려면, GenericArrayList<Integer> 에서는 Integer 타입으로, 
     GenericArrayList<String> 에서는 String 타입으로 사용될 수 있어야 하는데 하나의 공유변수가, 
     생성되는 인스턴스에 따라 타입이 바뀐다는 개념 자체가 말이 안되는 것이다. 그래서 static 변수에는 제네릭을 사용할 수 없다.
     하지만, (아래에서 살펴보겠지만) static 메서드에는 제네릭을 사용할 수 있다.


6. public static <T extends CharSequence> void printFirstChar(T param) {
    System.out.println(param.charAt(0));
   }

  1) public static void printFirstChar(T param) {
      System.out.println(param.charAt(0));
     }
    (1) 1)과 같은 static 메서드의 오류로는 param의 타입인 T를 알 수 없다는 것이고
        T의 타입을 알 수 없어 charAt()의 메서드 호출이 불가능 하다는 것이다.
        또한 <T extends CharSequence>와 같이 제네릭 선언이 없다는 것이다.
  2) static 변수에는 제네릭을 사용할 수 없지만 static 메서드에는 제네릭을 사용
     할 수 있는데 그 이유는 static 메서드의 경우 메서드의 틀만 공유되기 때문이다. 그 틀 안에서 
     타입 파라미터는 지역변수 처럼 사용될 수 있다.
